/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c)
 * From ASN.1 module "MMS-SCI-Module-1"
 * 	found in "IEC61850.asn1"
 * 	`asn1c -S/skeletons -fnative-types`
 */

#ifndef	_VMD_File_H_
#define	_VMD_File_H_


#include "asn_application.h"

/* Including external dependencies */
#include "ApplicationReference.h"
#include "MMSString.h"
#include "OBJECT_IDENTIFIER.h"
#include "Access-Control-List-instance.h"
#include "LogicalStatus.h"
#include "PhysicalStatus.h"
#include "BIT_STRING.h"
#include "asn_SEQUENCE_OF.h"
#include "constr_SEQUENCE_OF.h"
#include "Program-Invocation-instance.h"
#include "NULL.h"
#include "constr_CHOICE.h"
#include "constr_SEQUENCE.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum VMD_File__selected_Program_Invocation_PR {
	VMD_File__selected_Program_Invocation_PR_NOTHING,	/* No components present */
	VMD_File__selected_Program_Invocation_PR_selectedProgram,
	VMD_File__selected_Program_Invocation_PR_noneSelected
} VMD_File__selected_Program_Invocation_PR;

/* Forward declarations */
struct Access_Control_List_instance;
struct Domain_instance;
struct Program_Invocation_instance;
struct Unit_Control_instance;
struct Unnamed_Variable_instance;
struct Named_Variable_instance;
struct Named_Variable_List_instance;
struct Named_Type_instance;
struct Data_Exchange_instance;
struct Semaphore_instance;
struct Operator_Station_instance;
struct Event_Condition_instance;
struct Event_Action_instance;
struct Event_Enrollment_instance;
struct Event_Condition_List_instance;
struct Journal_instance;

/* VMD-File */
typedef struct VMD_File {
	ApplicationReference_t	 executiveFunction;
	MMSString_t	 vendorName;
	MMSString_t	 modelName;
	MMSString_t	 revision;
	OBJECT_IDENTIFIER_t	 abstractSyntaxes;
	Access_Control_List_instance_t	 accessControl;
	LogicalStatus_t	 logicalStatus;
	struct VMD_File__capabilities {
		A_SEQUENCE_OF(MMSString_t) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} capabilities;
	PhysicalStatus_t	 physicalStatus;
	BIT_STRING_t	 local_detail;
	struct VMD_File__accessControlLists {
		A_SEQUENCE_OF(struct Access_Control_List_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} accessControlLists;
	struct VMD_File__domains {
		A_SEQUENCE_OF(struct Domain_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} domains;
	struct VMD_File__programInvocations {
		A_SEQUENCE_OF(struct Program_Invocation_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} programInvocations;
	struct VMD_File__unitControls {
		A_SEQUENCE_OF(struct Unit_Control_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} unitControls;
	struct VMD_File__unnamedVariables {
		A_SEQUENCE_OF(struct Unnamed_Variable_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} unnamedVariables;
	struct VMD_File__namedVariables {
		A_SEQUENCE_OF(struct Named_Variable_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} namedVariables;
	struct VMD_File__namedVariableLists {
		A_SEQUENCE_OF(struct Named_Variable_List_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} namedVariableLists;
	struct VMD_File__namedTypes {
		A_SEQUENCE_OF(struct Named_Type_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} namedTypes;
	struct VMD_File__dataExchanges {
		A_SEQUENCE_OF(struct Data_Exchange_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} dataExchanges;
	struct VMD_File__semaphores {
		A_SEQUENCE_OF(struct Semaphore_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} semaphores;
	struct VMD_File__operatorStations {
		A_SEQUENCE_OF(struct Operator_Station_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} operatorStations;
	struct VMD_File__eventConditions {
		A_SEQUENCE_OF(struct Event_Condition_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} eventConditions;
	struct VMD_File__eventActions {
		A_SEQUENCE_OF(struct Event_Action_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} eventActions;
	struct VMD_File__eventEnrollments {
		A_SEQUENCE_OF(struct Event_Enrollment_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} eventEnrollments;
	struct VMD_File__eventConditionLists {
		A_SEQUENCE_OF(struct Event_Condition_List_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} eventConditionLists;
	struct VMD_File__journals {
		A_SEQUENCE_OF(struct Journal_instance) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} journals;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	struct VMD_File__selected_Program_Invocation {
		VMD_File__selected_Program_Invocation_PR present;
		union VMD_File__selected_Program_Invocation_u {
			Program_Invocation_instance_t	 selectedProgram;
			NULL_t	 noneSelected;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *selected_Program_Invocation;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} VMD_File_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_VMD_File;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "Access-Control-List-instance.h"
#include "Domain-instance.h"
#include "Program-Invocation-instance.h"
#include "Unit-Control-instance.h"
#include "Unnamed-Variable-instance.h"
#include "Named-Variable-instance.h"
#include "Named-Variable-List-instance.h"
#include "Named-Type-instance.h"
#include "Data-Exchange-instance.h"
#include "Semaphore-instance.h"
#include "Operator-Station-instance.h"
#include "Event-Condition-instance.h"
#include "Event-Action-instance.h"
#include "Event-Enrollment-instance.h"
#include "Event-Condition-List-instance.h"
#include "Journal-instance.h"

#endif	/* _VMD_File_H_ */
